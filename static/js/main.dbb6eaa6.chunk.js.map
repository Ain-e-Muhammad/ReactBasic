{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","changeSearch","type","onChange","App","changeText","setState","string","e","searchField","target","value","state","a","fetch","res","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAgBeA,EAZF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,eACxB,6BACKL,EAAMI,QAAQE,OAEnB,4BAAIN,EAAMI,QAAQG,YCKfC,G,MAZE,SAACR,GACd,OACI,qBAAKC,UAAU,YAAf,SAEED,EAAMS,SAASC,KAAK,SAACN,GAAD,OACpB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCAdM,G,MANG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACA,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCyCjEG,E,kDAvCb,aAAc,IAAD,8BACX,gBA6BFC,WAAa,WACX,EAAKC,SAAS,CAACC,OAAQ,eA/BZ,EAkCbN,aAAc,SAACO,GACb,EAAKF,SAAS,CAACG,YAAaD,EAAEE,OAAOC,SAjCrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJJ,E,4FASb,8BAAAI,EAAA,sEACoBC,MAAM,8CAD1B,cACQC,EADR,gBAEyBA,EAAIC,OAF7B,OAEQnB,EAFR,OAGEoB,KAAKX,SAAS,CAACT,aAHjB,gD,0EAMA,WACE,MAA+BoB,KAAKL,MAA9Bf,EAAN,EAAMA,SAAUY,EAAhB,EAAgBA,YACVS,EAAmBrB,EAASsB,QAAO,SAAC3B,GACxC,OAAOA,EAAQE,KAAK0B,cAAcC,SAASZ,EAAYW,kBAEzD,OAEE,sBAAK/B,UAAU,MAAf,UACE,0CACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GA3BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbb6eaa6.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\n\nconst Card = (props) => {\n    return(\n        <div className='card-container'>\n            <img alt = \"MONSTER\" src ={`https://robohash.org/${props.monster.id}?set=set2`}/>\n            <h2>                \n                {props.monster.name}\n            </h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react';\nimport Card from '../card/card.component'\nimport './card-list.styles.css'\n\nconst CardList = (props) =>{\n    return(\n        <div className=\"card-list\">        \n        {\n          props.monsters.map( (monster) => \n          <Card key={monster.id} monster={monster}/>\n            // <h1>as</h1>\n          )\n        }\n        </div>\n    )\n}\nexport default CardList","import React from 'react';\nimport './search-box.styles.css'\n\nconst SearchBox = ({placeholder, changeSearch}) => {\n    return(\n    <input className='search' type='search' placeholder={placeholder} onChange={changeSearch}/>\n    )\n}\n\nexport default SearchBox","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component'\nimport SearchBox from './components/search-box/search-box.component'\n\nclass App extends Component{\n  //The state of monsters we have to display\n  constructor(){\n    super()\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  //Fetching data using Async Promises\n  async componentDidMount(){\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n    const monsters = await res.json()\n    this.setState({monsters})\n  }\n\n  render(){\n    const{monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      \n      <div className=\"App\">\n        <h1>Monsters</h1>\n        <SearchBox placeholder=\"Search Monsters\" changeSearch={this.changeSearch}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n  \n  changeText = () => {\n    this.setState({string: \"Hello Ali\"})\n  }\n\n  changeSearch= (e) => {\n    this.setState({searchField: e.target.value})\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}